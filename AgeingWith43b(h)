import pandas as pd
from tkinter import Tk, filedialog, simpledialog, messagebox
from collections import deque
from datetime import datetime
import os

# -------------------- CONFIG -------------------- #
cutoff_input = simpledialog.askstring("Cutoff Date", "Enter cutoff date (dd-mm-yyyy):", initialvalue="31-03-2025")
try:
    CUTOFF_DATE = pd.to_datetime(cutoff_input, dayfirst=True)
except Exception as e:
    messagebox.showerror("Invalid Date", f"Error parsing date: {e}")
    exit()

# -------------------- FILE SELECTION -------------------- #
Tk().withdraw()
file_path = filedialog.askopenfilename(title="Select Ledger Excel File", filetypes=[("Excel files", "*.xlsx *.xls")])
if not file_path:
    print("❌ No file selected.")
    exit()

# -------------------- FILE TYPE (Debtor/Creditor) -------------------- #
file_type = simpledialog.askstring(
    "Select Type",
    "Enter 'Debtor' or 'Creditor':\n(Tip: Type 'D' or 'C')",
    initialvalue="Debtor"
)

if not file_type:
    print("❌ No input provided.")
    exit()

file_type = file_type.strip().lower()
if file_type.startswith("d"):
    file_type = "debtor"
elif file_type.startswith("c"):
    file_type = "creditor"
else:
    messagebox.showerror("Error", "Invalid input. Please type 'Debtor' or 'Creditor'.")
    exit()

if file_type not in ['debtor', 'creditor']:
    print("❌ Invalid entry. Please enter either 'Debtor' or 'Creditor'.")
    exit()

# -------------------- READ AND PARSE LEDGER -------------------- #
df = pd.read_excel(file_path, header=None)
records = []
current_party = None

for idx, row in df.iterrows():
    if str(row[0]).strip().lower().startswith("ledger:"):
        current_party = str(row[1]).strip() if pd.notna(row[1]) else "Unknown"
        continue

    if current_party:
        date = pd.to_datetime(row[0] or 0, errors='coerce')
        if pd.isna(date) or date < pd.Timestamp("2000-01-01"):
            continue
        try:
            debit = float(row[5]) if not pd.isna(row[5]) else 0
            credit = float(row[6]) if not pd.isna(row[6]) else 0
        except:
            continue
        records.append([current_party, date, debit, credit])

data = pd.DataFrame(records, columns=["Party", "Date", "Debit", "Credit"])
data = data.sort_values(by=["Party", "Date"])

# -------------------- FIFO AGING + LOG -------------------- #
def calculate_aging_fifo(df, cutoff_date, file_type):
    aging_summary = []
    log_details = []
    disallow_43b = []

    for party, group in df.groupby("Party"):
        group = group.sort_values("Date")
        entries = deque()
        unmatched_payments = deque()
        advance_amount = 0

        all_payments_post_cutoff = group[(group["Date"] > cutoff_date) & (group["Debit"] > 0)]

        for _, row in group.iterrows():
            if pd.isna(row["Date"]):
                continue

            if file_type == "creditor":
                if row["Debit"] > 0 and row["Date"] <= cutoff_date:
                    unmatched_payments.append({'date': row["Date"], 'amount': row["Debit"]})
                elif row["Credit"] > 0:
                    bill = {'date': row["Date"], 'amount': row["Credit"], 'matched': 0}
                    amt = bill["amount"]

                    while amt > 0 and unmatched_payments:
                        payment = unmatched_payments[0]
                        available = payment["amount"]
                        to_match = min(amt, available)
                        bill["matched"] += to_match
                        payment["amount"] -= to_match
                        amt -= to_match
                        if payment["amount"] <= 0:
                            unmatched_payments.popleft()

                    if bill["matched"] < bill["amount"]:
                        entries.append(bill)
            else:
                if row["Debit"] > 0:
                    entries.append({'date': row["Date"], 'amount': row["Debit"], 'matched': 0})
                elif row["Credit"] > 0:
                    amt = row["Credit"]
                    while amt > 0 and entries:
                        invoice = entries[0]
                        available = invoice["amount"] - invoice["matched"]
                        to_match = min(amt, available)
                        invoice["matched"] += to_match
                        amt -= to_match
                        if invoice["matched"] == invoice["amount"]:
                            entries.popleft()
                    if amt > 0:
                        advance_amount += amt
                        log_details.append({
                            "Party": party,
                            "Invoice Date": row["Date"],
                            "Invoice Amount": "",
                            "Matched Amount": "",
                            "Unpaid Amount": amt,
                            "Age (in days)": "",
                            "Aging Bucket": "",
                            "Remarks": "Advance from customer"
                        })

        if file_type == "creditor":
            for payment in unmatched_payments:
                if payment["date"] > cutoff_date:
                    continue  # skip payments after cutoff for advance to supplier
                amt = payment["amount"]
                if amt > 0:
                    advance_amount += amt
                    log_details.append({
                        "Party": party,
                        "Invoice Date": payment["date"],
                        "Invoice Amount": "",
                        "Matched Amount": "",
                        "Unpaid Amount": amt,
                        "Age (in days)": "",
                        "Aging Bucket": "",
                        "Remarks": "Advance to supplier"
                    })

        buckets = {"0-30": 0, "31-60": 0, "61-90": 0, ">90": 0}
        for entry in entries:
            unpaid = entry["amount"] - entry["matched"]
            if unpaid <= 0 or entry["date"] > cutoff_date:
                continue
            age = (cutoff_date - entry["date"]).days
            if age <= 30:
                bucket = "0-30"
            elif age <= 60:
                bucket = "31-60"
            elif age <= 90:
                bucket = "61-90"
            else:
                bucket = ">90"
            buckets[bucket] += unpaid

            log_details.append({
                "Party": party,
                "Invoice Date": entry["date"],
                "Invoice Amount": entry["amount"],
                "Matched Amount": entry["matched"],
                "Unpaid Amount": unpaid,
                "Age (in days)": age,
                "Aging Bucket": bucket,
                "Remarks": ""
            })

            # 43B(h) Analysis
            if file_type == "creditor":
                disallowed = ""
                paid_amt = 0
                paid_date = ""
                within_45_days = "No"

                deadline = entry["date"] + pd.Timedelta(days=45)
                payments = all_payments_post_cutoff[all_payments_post_cutoff["Date"] <= deadline]

                remaining_unpaid = unpaid
                for _, pay in payments.iterrows():
                    if remaining_unpaid <= 0:
                        break
                    this_pay = min(remaining_unpaid, pay["Debit"])
                    paid_amt += this_pay
                    paid_date = pay["Date"]
                    remaining_unpaid -= this_pay

                if remaining_unpaid <= 0:
                    within_45_days = "Yes"
                    disallowed = "No"
                elif age > 45 or remaining_unpaid > 0:
                    within_45_days = "No"
                    disallowed = "Yes"

                disallow_43b.append({
                    "Party": party,
                    "Invoice Date": entry["date"],
                    "Invoice Amount": entry["amount"],
                    "Unpaid Amount": unpaid,
                    "Paid Amount": paid_amt,
                    "Paid Date": paid_date,
                    "Within 45 Days": within_45_days,
                    "Disallowed u/s 43B(h)": disallowed
                })

        party_summary = {
            "Party": party,
            "Total Outstanding": sum(buckets.values()),
            **buckets
        }

        if file_type == "debtor":
            party_summary["Advance from Customer"] = advance_amount
        elif file_type == "creditor":
            party_summary["Advance to Supplier"] = advance_amount

        aging_summary.append(party_summary)

    return pd.DataFrame(aging_summary), pd.DataFrame(log_details), pd.DataFrame(disallow_43b)

# -------------------- RUN AND EXPORT -------------------- #
aging_df, log_df, df_43b_log = calculate_aging_fifo(data, CUTOFF_DATE, file_type)

output_path = os.path.splitext(file_path)[0] + f"_{file_type}_aging_report.xlsx"
with pd.ExcelWriter(output_path, engine="openpyxl") as writer:
    aging_df.to_excel(writer, sheet_name="Aging Summary", index=False)
    log_df.to_excel(writer, sheet_name="FIFO Log", index=False)
    if file_type == "creditor":
        df_43b_log.to_excel(writer, sheet_name="43B(h) Disallowance", index=False)

print(f"✅ Aging Report + Log saved to:\n{output_path}")
